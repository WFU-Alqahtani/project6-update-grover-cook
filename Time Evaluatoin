This graph compares the efficiency of Insertion Sort in both a linked list and a vector with data points taken for every 2000 entries. The linked list sort happens much faster than the vector sort because it is much easier to insert a new object into the middle of the list. In a linked list, all the program needs to do to insert a new node is change the pointer on the previous node to point at the new node, and have the new node point to the next node. Linked list insertion therefore only takes two operations. Alternatively, in a vector, inserting a new object into the middle of the list means you have to shift everything after that point back one position first, which can take significant amounts of time as the size of the list grows. This makes inserting an object into a vector have O(n), a worst case scenario being to insert it at the beginning. While linked lists are slightly harder to write, they make insertion sort much more efficient, especially with large data sizes.